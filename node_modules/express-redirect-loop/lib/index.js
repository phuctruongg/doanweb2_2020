"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const Url = require('url-parse');

const deprecate = require('depd')('express');

module.exports = opts => {
  opts = _objectSpread({
    defaultPath: '/',
    maxRedirects: 5
  }, opts);
  return (req, res, next) => {
    if (!req.session) return next(new Error('Sessions required for `express-redirect-loop`'));
    const redirect = res.redirect,
          end = res.end;

    res.end = function (chunk, encoding) {
      // instead of `!req.xhr` we need to use !accepts HTML
      // because Fetch does not provide XMLHttpRequest
      if (req.accepts('html')) {
        req.session.prevPrevPath = req.session.prevPath;
        req.session.prevPath = req.originalUrl;
        req.session.prevMethod = req.method; // if it was a redirect then store how many times
        // so that we can limit the max number of redirects

        if ([301, 302].includes(res.statusCode)) req.session.maxRedirects = typeof req.session.maxRedirects === 'number' ? req.session.maxRedirects + 1 : 1;else req.session.maxRedirects = 0;
      }

      end.call(res, chunk, encoding);
    };

    res.redirect = function (url, ...args) {
      let address = url;
      let status = 302; // allow status/url

      args = [url].concat(args);

      if (args.length === 2) {
        if (typeof args[0] === 'number') {
          status = args[0];
          address = args[1];
        } else {
          deprecate('res.redirect(url, status): Use res.redirect(status, url) instead');
          status = args[1];
        }
      }

      address = this.location(address).get('Location');
      const prevPrevPath = req.session.prevPrevPath || opts.defaultPath;
      const prevPath = req.session.prevPath || opts.defaultPath;
      const prevMethod = req.session.prevMethod || req.method;
      const maxRedirects = req.session.maxRedirects || 1;

      if (prevPath && address === prevPath && req.method === prevMethod) {
        if (prevPrevPath && address !== prevPrevPath && maxRedirects <= opts.maxRedirects) {
          address = prevPrevPath;
        } else {
          // if the prevPrevPath w/o querystring is !== prevPrevPath
          // then redirect then to prevPrevPath w/o querystring
          const _ref = new Url(prevPrevPath, {}),
                pathname = _ref.pathname;

          if (pathname === prevPrevPath) address = '/';else address = pathname;
        }
      } else if (maxRedirects > opts.maxRedirects) {
        address = opts.defaultPath;
      }

      redirect.call(res, status, address);
    };

    next();
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJVcmwiLCJyZXF1aXJlIiwiZGVwcmVjYXRlIiwibW9kdWxlIiwiZXhwb3J0cyIsIm9wdHMiLCJkZWZhdWx0UGF0aCIsIm1heFJlZGlyZWN0cyIsInJlcSIsInJlcyIsIm5leHQiLCJzZXNzaW9uIiwiRXJyb3IiLCJyZWRpcmVjdCIsImVuZCIsImNodW5rIiwiZW5jb2RpbmciLCJhY2NlcHRzIiwicHJldlByZXZQYXRoIiwicHJldlBhdGgiLCJvcmlnaW5hbFVybCIsInByZXZNZXRob2QiLCJtZXRob2QiLCJpbmNsdWRlcyIsInN0YXR1c0NvZGUiLCJjYWxsIiwidXJsIiwiYXJncyIsImFkZHJlc3MiLCJzdGF0dXMiLCJjb25jYXQiLCJsZW5ndGgiLCJsb2NhdGlvbiIsImdldCIsInBhdGhuYW1lIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLE1BQU1BLEdBQUcsR0FBR0MsT0FBTyxDQUFDLFdBQUQsQ0FBbkI7O0FBQ0EsTUFBTUMsU0FBUyxHQUFHRCxPQUFPLENBQUMsTUFBRCxDQUFQLENBQWdCLFNBQWhCLENBQWxCOztBQUVBRSxNQUFNLENBQUNDLE9BQVAsR0FBaUJDLElBQUksSUFBSTtBQUN2QkEsRUFBQUEsSUFBSTtBQUNGQyxJQUFBQSxXQUFXLEVBQUUsR0FEWDtBQUVGQyxJQUFBQSxZQUFZLEVBQUU7QUFGWixLQUdDRixJQUhELENBQUo7QUFLQSxTQUFPLENBQUNHLEdBQUQsRUFBTUMsR0FBTixFQUFXQyxJQUFYLEtBQW9CO0FBQ3pCLFFBQUksQ0FBQ0YsR0FBRyxDQUFDRyxPQUFULEVBQ0UsT0FBT0QsSUFBSSxDQUFDLElBQUlFLEtBQUosQ0FBVSwrQ0FBVixDQUFELENBQVg7QUFGdUIsVUFJakJDLFFBSmlCLEdBSUNKLEdBSkQsQ0FJakJJLFFBSmlCO0FBQUEsVUFJUEMsR0FKTyxHQUlDTCxHQUpELENBSVBLLEdBSk87O0FBTXpCTCxJQUFBQSxHQUFHLENBQUNLLEdBQUosR0FBVSxVQUFTQyxL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S2hCLFlBQWpCLEVBQStCVSxPQUFPLEdBQUcsR0FBVixDQUEvQixLQUNLQSxPQUFPLEdBQUdNLFFBQVY7QUFDTjtBQUNGLE9BZEQsTUFjTyxJQUFJM0IsWUFBWSxHQUFHRixJQUFJLENBQUNFLFlBQXhCLEVBQXNDO0FBQzNDcUIsUUFBQUEsT0FBTyxHQUFHdkIsSUFBSSxDQUFDQyxXQUFmO0FBQ0Q7O0FBRURPLE1BQUFBLFFBQVEsQ0FBQ1ksSUFBVCxDQUFjaEIsR0FBZCxFQUFtQm9CLE1BQW5CLEVBQTJCRCxPQUEzQjtBQUNELEtBNUNEOztBQThDQWxCLElBQUFBLElBQUk7QUFDTCxHQXpFRDtBQTBFRCxDQWhGRCIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFVybCA9IHJlcXVpcmUoJ3VybC1wYXJzZScpO1xuY29uc3QgZGVwcmVjYXRlID0gcmVxdWlyZSgnZGVwZCcpKCdleHByZXNzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gb3B0cyA9PiB7XG4gIG9wdHMgPSB7XG4gICAgZGVmYXVsdFBhdGg6ICcvJyxcbiAgICBtYXhSZWRpcmVjdHM6IDUsXG4gICAgLi4ub3B0c1xuICB9O1xuICByZXR1cm4gKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4gICAgaWYgKCFyZXEuc2Vzc2lvbilcbiAgICAgIHJldHVybiBuZXh0KG5ldyBFcnJvcignU2Vzc2lvbnMgcmVxdWlyZWQgZm9yIGBleHByZXNzLXJlZGlyZWN0LWxvb3BgJykpO1xuXG4gICAgY29uc3QgeyByZWRpcmVjdCwgZW5kIH0gPSByZXM7XG5cbiAgICByZXMuZW5kID0gZnVuY3Rpb24oY2h1bmssIGVuY29kaW5nKSB7XG4gICAgICAvLyBpbnN0ZWFkIG9mIGAhcmVxLnhocmAgd2UgbmVlZCB0byB1c2UgIWFjY2VwdHMgSFRNTFxuICAgICAgLy8gYmVjYXVzZSBGZXRjaCBkb2VzIG5vdCBwcm92aWRlIFhNTEh0dHBSZXF1ZXN0XG4gICAgICBpZiAocmVxLmFjY2VwdHMoJ2h0bWwnKSkge1xuICAgICAgICByZXEuc2Vzc2lvbi5wcmV2UHJldlBhdGggPSByZXEuc2Vzc2lvbi5wcmV2UGF0aDtcbiAgICAgICAgcmVxLnNlc3Npb24ucHJldlBhdGggPSByZXEub3JpZ2luYWxVcmw7XG4gICAgICAgIHJlcS5zZXNzaW9uLnByZXZNZXRob2QgPSByZXEubWV0aG9kO1xuICAgICAgICAvLyBpZiBpdCB3YXMgYSByZWRpcmVjdCB0aGVuIHN0b3JlIGhvdyBtYW55IHRpbWVzXG4gICAgICAgIC8vIHNvIHRoYXQgd2UgY2FuIGxpbWl0IHRoZSBtYXggbnVtYmVyIG9mIHJlZGlyZWN0c1xuICAgICAgICBpZiAoWzMwMSwgMzAyXS5pbmNsdWRlcyhyZXMuc3RhdHVzQ29kZSkpXG4gICAgICAgICAgcmVxLnNlc3Npb24ubWF4UmVkaXJlY3RzID1cbiAgICAgICAgICAgIHR5cGVvZiByZXEuc2Vzc2lvbi5tYXhSZWRpcmVjdHMgPT09ICdudW1iZXInXG4gICAgICAgICAgICAgID8gcmVxLnNlc3Npb24ubWF4UmVkaXJlY3RzICsgMVxuICAgICAgICAgICAgICA6IDE7XG4gICAgICAgIGVsc2UgcmVxLnNlc3Npb24ubWF4UmVkaXJlY3RzID0gMDtcbiAgICAgIH1cblxuICAgICAgZW5kLmNhbGwocmVzLCBjaHVuaywgZW5jb2RpbmcpO1xuICAgIH07XG5cbiAgICByZXMucmVkaXJlY3QgPSBmdW5jdGlvbih1cmwsIC4uLmFyZ3MpIHtcbiAgICAgIGxldCBhZGRyZXNzID0gdXJsO1xuICAgICAgbGV0IHN0YXR1cyA9IDMwMjtcblxuICAgICAgLy8gYWxsb3cgc3RhdHVzL3VybFxuICAgICAgYXJncyA9IFt1cmxdLmNvbmNhdChhcmdzKTtcbiAgICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICBpZiAodHlwZW9mIGFyZ3NbMF0gPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgc3RhdHVzID0gYXJnc1swXTtcbiAgICAgICAgICBhZGRyZXNzID0gYXJnc1sxXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkZXByZWNhdGUoXG4gICAgICAgICAgICAncmVzLnJlZGlyZWN0KHVybCwgc3RhdHVzKTogVXNlIHJlcy5yZWRpcmVjdChzdGF0dXMsIHVybCkgaW5zdGVhZCdcbiAgICAgICAgICApO1xuICAgICAgICAgIHN0YXR1cyA9IGFyZ3NbMV07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgYWRkcmVzcyA9IHRoaXMubG9jYXRpb24oYWRkcmVzcykuZ2V0KCdMb2NhdGlvbicpO1xuXG4gICAgICBjb25zdCBwcmV2UHJldlBhdGggPSByZXEuc2Vzc2lvbi5wcmV2UHJldlBhdGggfHwgb3B0cy5kZWZhdWx0UGF0aDtcbiAgICAgIGNvbnN0IHByZXZQYXRoID0gcmVxLnNlc3Npb24ucHJldlBhdGggfHwgb3B0cy5kZWZhdWx0UGF0aDtcbiAgICAgIGNvbnN0IHByZXZNZXRob2QgPSByZXEuc2Vzc2lvbi5wcmV2TWV0aG9kIHx8IHJlcS5tZXRob2Q7XG4gICAgICBjb25zdCBtYXhSZWRpcmVjdHMgPSByZXEuc2Vzc2lvbi5tYXhSZWRpcmVjdHMgfHwgMTtcblxuICAgICAgaWYgKHByZXZQYXRoICYmIGFkZHJlc3MgPT09IHByZXZQYXRoICYmIHJlcS5tZXRob2QgPT09IHByZXZNZXRob2QpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHByZXZQcmV2UGF0aCAmJlxuICAgICAgICAgIGFkZHJlc3MgIT09IHByZXZQcmV2UGF0aCAmJlxuICAgICAgICAgIG1heFJlZGlyZWN0cyA8PSBvcHRzLm1heFJlZGlyZWN0c1xuICAgICAgICApIHtcbiAgICAgICAgICBhZGRyZXNzID0gcHJldlByZXZQYXRoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGlmIHRoZSBwcmV2UHJldlBhdGggdy9vIHF1ZXJ5c3RyaW5nIGlzICE9PSBwcmV2UHJldlBhdGhcbiAgICAgICAgICAvLyB0aGVuIHJlZGlyZWN0IHRoZW4gdG8gcHJldlByZXZQYXRoIHcvbyBxdWVyeXN0cmluZ1xuICAgICAgICAgIGNvbnN0IHsgcGF0aG5hbWUgfSA9IG5ldyBVcmwocHJldlByZXZQYXRoLCB7fSk7XG4gICAgICAgICAgaWYgKHBhdGhuYW1lID09PSBwcmV2UHJldlBhdGgpIGFkZHJlc3MgPSAnLyc7XG4gICAgICAgICAgZWxzZSBhZGRyZXNzID0gcGF0aG5hbWU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAobWF4UmVkaXJlY3RzID4gb3B0cy5tYXhSZWRpcmVjdHMpIHtcbiAgICAgICAgYWRkcmVzcyA9IG9wdHMuZGVmYXVsdFBhdGg7XG4gICAgICB9XG5cbiAgICAgIHJlZGlyZWN0LmNhbGwocmVzLCBzdGF0dXMsIGFkZHJlc3MpO1xuICAgIH07XG5cbiAgICBuZXh0KCk7XG4gIH07XG59O1xuIl19